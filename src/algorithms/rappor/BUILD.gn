# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/test.gni")

config("rappor_config") {
  # Use O3 level optimizations for building RAPPOR.
  cflags = [ "-O3" ]
  configs = [ "$cobalt_root:cobalt_config" ]
}

source_set("rappor_config_validator") {
  sources = [
    "rappor_config_validator.cc",
  ]

  deps = [
    "$cobalt_root:logging",
  ]

  public_deps = [
    "$cobalt_root:cobalt_proto",
    "$cobalt_root/config:cobalt_registry_proto",
    "$cobalt_root/encoder:client_secret",
  ]

  configs += [ ":rappor_config" ]
}

source_set("rappor_encoder") {
  sources = [
    "rappor_encoder.cc",
  ]

  deps = [
    ":rappor_config_validator",
    "$cobalt_root:logging",
    "$cobalt_root:tracing",
    "$cobalt_root/encoder:client_secret",
  ]
  public_deps = [
    "$cobalt_root:cobalt_proto",
    "$cobalt_root/util/crypto_util",
  ]
  configs += [ ":rappor_config" ]
}

if (!is_fuchsia_tree) {
  source_set("lasso_runner") {
    sources = [
      "lasso_runner.cc",
    ]
    deps = [
      "$cobalt_root:logging",
      "$cobalt_root/util/lossmin/minimizers",
      "//third_party/eigen",
    ]
    configs += [ ":rappor_config" ]
  }
}

source_set("rappor_config_helper") {
  sources = [
    "rappor_config_helper.cc",
  ]
  public_deps = [
    "$cobalt_root/config:cobalt_registry_proto",
  ]
  deps = [
    "$cobalt_root:logging",
  ]
  configs += [ ":rappor_config" ]
}

if (!is_fuchsia_tree) {
  source_set("rappor_analyzer") {
    sources = [
      "basic_rappor_analyzer.cc",
      "bloom_bit_counter.cc",
      "rappor_analyzer.cc",
      "rappor_analyzer_utils.cc",
    ]

    deps = [
      ":lasso_runner",
      ":rappor_config_validator",
      ":rappor_encoder",
      "$cobalt_root:logging",
      "$cobalt_root/util/lossmin/minimizers",
      "//third_party/eigen",
      "//third_party/grpc:grpc++",
    ]
    public_deps = [
      "$cobalt_root/util/crypto_util",
    ]
    configs += [ ":rappor_config" ]
  }
}

test("rappor_tests") {
  sources = [
    "rappor_config_helper_test.cc",
    "rappor_encoder_test.cc",
    "rappor_test_utils.cc",
    "rappor_test_utils_test.cc",
  ]

  if (!is_fuchsia_tree) {
    sources += [
      "basic_rappor_analyzer_test.cc",
      "bloom_bit_counter_test.cc",
      "rappor_analyzer_test.cc",
      "rappor_analyzer_unit_tests.cc",
    ]
  }

  deps = [
    ":rappor_config_helper",
    ":rappor_encoder",
    "$cobalt_root:logging",
    "//third_party/gflags",
    "//third_party/googletest:gtest",
    "//third_party/grpc:grpc++",
  ]
  if (!is_fuchsia_tree) {
    deps += [ ":rappor_analyzer" ]
  } else {
    deps += [ "//third_party/googletest:gtest_main" ]
  }
  configs += [ ":rappor_config" ]
}

test("rappor_manual_tests") {
  if (!is_fuchsia_tree) {
    output_dir = "$root_out_dir/tests/manual"
  }

  sources = [
    "rappor_test_utils.cc",
    "rappor_test_utils_test.cc",
  ]
  if (!is_fuchsia_tree) {
    sources += [
      "rappor_analyzer_manual_tests.cc",
      "rappor_analyzer_test.cc",
    ]
  }
  deps = [
    ":rappor_config_helper",
    ":rappor_encoder",
    "$cobalt_root:logging",
    "//third_party/gflags",
    "//third_party/googletest:gtest",
    "//third_party/googletest:gtest_main",
    "//third_party/grpc:grpc++",
  ]
  if (!is_fuchsia_tree) {
    deps += [ ":rappor_analyzer" ]
  }
  configs += [ "$cobalt_root:cobalt_config" ]
}

if (!is_fuchsia_tree) {
  source_set("lasso_runner_tests") {
    testonly = true
    sources = [
      "lasso_runner_test.cc",
      "lasso_runner_unit_tests.cc",
    ]
    deps = [
      ":lasso_runner",
      "$cobalt_root:logging",
      "//third_party/googletest:gtest",
    ]
    configs += [ "$cobalt_root:cobalt_config" ]
  }
}

group("tests") {
  testonly = true
  deps = [
    ":rappor_manual_tests",
    ":rappor_tests",
  ]

  if (!is_fuchsia_tree) {
    deps += [ ":lasso_runner_tests" ]
  }
}
