# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//third_party/protobuf/proto_library.gni")
import("$cobalt_root/cobalt_config_header.gni")

#TODO(rudominer) Delete once the Fuchsia build does not depend on this target.
group("encoder") {
  public_deps = [
    ":client_secret",
    ":observation_store",
    ":shipping_manager",
    ":system_data",
    "$cobalt_root/config:client_config",
    "$cobalt_root/logger:channel_mapper",
    "$cobalt_root/logger:internal_metrics",
    "$cobalt_root/util:clock",
    "$cobalt_root/util:encrypted_message_util",
  ]
}

source_set("legacy_project_context") {
  sources = [
    "project_context.cc",
    "project_context.h",
  ]
  configs += [ "$cobalt_root:cobalt_config" ]

  deps = [
    ":client_secret",
    "$cobalt_root:logging",
    "$cobalt_root/config:client_config",
    "//third_party/protobuf:protobuf_lite",
  ]
}

source_set("system_data") {
  sources = [
    "system_data.cc",
    "system_data.h",
  ]
  deps = [
    "$cobalt_root:logging",
    "$cobalt_root/logger:channel_mapper",
    "//third_party/abseil-cpp",
  ]
  public_deps = [
    "$cobalt_root:cobalt_proto",
  ]
}

source_set("observation_store_update_recipient") {
  sources = [
    "observation_store_update_recipient.h",
  ]
}

proto_library("file_observation_store_internal_proto") {
  sources = [
    "file_observation_store_internal.proto",
  ]
  extra_configs = [ "$cobalt_root:cobalt_config" ]
  import_dirs = [
    "//third_party/protobuf/src",
    "$cobalt_root",
  ]
  cc_generator_options = "lite"
  generate_python = false
  deps = [
    "$cobalt_root:cobalt_proto",
    "$cobalt_root/util:proto_serialization",
  ]
}

source_set("observation_store") {
  sources = [
    "envelope_maker.cc",
    "envelope_maker.h",
    "file_observation_store.cc",
    "file_observation_store.h",
    "memory_observation_store.cc",
    "memory_observation_store.h",
    "observation_store.cc",
    "observation_store.h",
  ]
  deps = [
    ":file_observation_store_internal_proto",
    ":observation_store_update_recipient",
    "$cobalt_root/logger:internal_metrics",
    "$cobalt_root/logger:logger_interface",
  ]
  public_deps = [
    "$cobalt_root:cobalt_proto",
    "$cobalt_root:logging",
    "$cobalt_root:tracing",
    "$cobalt_root/util:encrypted_message_util",
  ]
}

source_set("shipping_manager") {
  sources = [
    "shipping_manager.cc",
    "shipping_manager.h",
    "upload_scheduler.cc",
    "upload_scheduler.h",
  ]
  deps = [
    ":system_data",
  ]
  public_deps = [
    ":observation_store",
    ":observation_store_update_recipient",
    "$cobalt_root/logger:logger_interface",
    "$cobalt_root/third_party/clearcut:clearcut",
    "//third_party/grpc:grpc++",
  ]
}

source_set("client_secret") {
  sources = [
    "client_secret.cc",
    "client_secret.h",
  ]
  configs += [ "$cobalt_root:cobalt_config" ]

  deps = [
    "$cobalt_root/util/crypto_util",
  ]
}

source_set("unittests") {
  testonly = true

  sources = [
    "client_secret_test.cc",
    "envelope_maker_test.cc",
    "envelope_maker_test_config.h",
    "file_observation_store_test.cc",
    "shipping_manager_test.cc",
    "system_data_test.cc",
  ]

  deps = [
    ":legacy_project_context",
    ":observation_store",
    ":shipping_manager",
    "$cobalt_root:logging",
    "//third_party/abseil-cpp",
    "//third_party/gflags",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest_main",
  ]

  configs += [ "$cobalt_root:cobalt_config" ]
}
