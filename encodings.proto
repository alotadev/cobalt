// Copyright 2016 The Fuchsia Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package cobalt;

// A Cobalt Epoch is a contiguous sequence of days used to aggregate
// observations. Each Report analyzes a set of observations from one epoch.
// Some encodings, such as Forculus, use the current epoch as a parameter.
//
// Each Cobalt |Observation| includes a |day_index| which determines in
// which epoch the Observation falls.
enum EpochType {
  // Each day is a different epoch.
  DAY = 0;
  // A week epoch is a seven day period from  Sunday to Saturday
  WEEK = 1;
  // A month epoch is the set of days in a single month of the Gregorian
  // calendar
  MONTH = 2;
}


///////////////////////////////////////////////////////////////
// Messages that describe the configuration of an encoding.
// These are registered in the Cobalt Config Database and consumed
// by both the Encoder and the Analyzer. Each ObservationPart (see cobalt.proto)
// contains the ID of an EncodingConfig describing how the data
// was encoded.
///////////////////////////////////////////////////////////////

message ForculusConfig {
  uint32 threshold = 1;

  // Forculus threshold encryption is based on the current epoch. For example
  // if epoch_type = WEEK and threshold = 20 then the criteria for being able
  // to decrypt a given ciphertext is that at least 20 different clients
  // all submit observations of that ciphertext tagged with a day_index in
  // the same week, from Sunday to Saturday.
  EpochType epoch_type = 2;
}

message RapporConfig {
  uint32 k = 1;
  uint32 h = 2;
  uint32 m = 3;
  float p = 4;
  float q = 5;
  float f = 6;
}

message BasicRapporConfig {
  uint32 k = 1;
  float p = 4;
  float q = 5;
  float f = 6;
  // For basic RAPPOR the Encoder needs to know the list of categories.
  // They are listed in order of their category.
  repeated string categories = 7;
}

message EncodingConfig {
  uint32 customer_id = 1;
  uint32 project_id = 2;
  uint32 id = 3;
  oneof config {
    ForculusConfig forculus = 4;
    RapporConfig rappor = 5;
    BasicRapporConfig basic_rappor = 6;
  }
}
